name: Build image simulator

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read
  checks: write

env:
  ECR_REGISTRY: 847647377987.dkr.ecr.eu-central-1.amazonaws.com/epsilon
  SERVICE_NAME: simulator
  AWS_REGION: eu-central-1

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Get current version to branch
        id: version
        run: |
          version=$(./.devops/get_latest_build.sh ${{ github.ref_name }} ${{ env.SERVICE_NAME }})
          echo "version=$version" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: [prepare]
    name: Build
    steps:
      - uses: actions/checkout@v4
      - name: Update git submodules
        run: git submodule update --init --recursive
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.ref_name }}_${{ needs.prepare.outputs.version }}
        run: |
          docker build -f ./Dockerfile --tag $IMAGE_NAME .
          docker push $IMAGE_NAME
