name: Deploy simulator

env:
  ECR_REGISTRY: 847647377987.dkr.ecr.eu-central-1.amazonaws.com/epsilon
  SERVICE_NAME: simulator
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Selected version'
        type: 'number'
        required: true

      environment:
        description: 'Environment'
        required: true
        type: environment


jobs:
  prepare:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Validate images in ECR
        run: |          
          version="${{ inputs.version }}"
          ref_name="${{ github.ref_name }}"
          ecr_registry="${{ env.ECR_REGISTRY }}"
          if aws ecr describe-images --repository-name "epsilon/${{ env.SERVICE_NAME }}" --image-ids imageTag="${ref_name}_${version}" > /dev/null 2>&1; then
            echo "Image $image_tag exists."
          else
            echo "Image $image_tag not found. Stopping deployment."
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: prepare
    environment: ${{ inputs.environment }}
    steps:
    - name: Clone
      uses: actions/checkout@v4
    - name: Update git submodules
      run: git submodule update --init --recursive
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Update KubeConfig
      run: |
        aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region=${{ vars.AWS_REGION }}

    - name: Create Kubernetes Secret from GitHub Secrets list
      env:
        SECRET_NAMESPACE: epsilon
        SECRET_NAME: simulator-env
        SECRET_KEYS: MONGO_URI,RPC_URL,DEFAULT_RPC_URL_SEPOLIA,EXECUTOR_PRIVATE_KEY,RPC_URL_11155111,RPC_URL_8453,ZERODEV_API_KEY,SDK_PINO_LOGGER,RPC_URL_1,RPC_URL_10,RPC_URL_42161,RPC_URL_137
        MONGO_URI: ${{ secrets.MONGO_URI }}
        RPC_URL: ${{ secrets.RPC_URL }}
        DEFAULT_RPC_URL_SEPOLIA: ${{ secrets.DEFAULT_RPC_URL_SEPOLIA }}
        EXECUTOR_PRIVATE_KEY: ${{ secrets.EXECUTOR_PRIVATE_KEY }}
        RPC_URL_11155111: ${{ secrets.RPC_URL_11155111 }}
        RPC_URL_8453: ${{ secrets.RPC_URL_8453 }}
        ZERODEV_API_KEY: ${{ secrets.ZERODEV_API_KEY }}
        SDK_PINO_LOGGER: ${{ secrets.SDK_PINO_LOGGER }}
        RPC_URL_1: ${{ secrets.RPC_URL_1 }}
        RPC_URL_10: ${{ secrets.RPC_URL_10 }}
        RPC_URL_42161: ${{ secrets.RPC_URL_42161 }}
        RPC_URL_137: ${{ secrets.RPC_URL_137 }}
      run: |
        IFS=',' read -ra KEYS <<< "$SECRET_KEYS"
        args=(create secret generic "$SECRET_NAME" -n "$SECRET_NAMESPACE" --dry-run=client -o yaml)
        for key in "${KEYS[@]}"; do
          value="${!key}"
          if [[ -z "$value" ]]; then
            echo "Warning: Secret $key is empty or not set. Skipping..."
            continue
          fi
          args+=(--from-literal="$key=$value")
        done
        kubectl "${args[@]}" | kubectl apply -f -

    - name: Deploy services

      run: |
          version="${{ inputs.version }}"
          version="${{ inputs.version }}"
          ref_name="${{ github.ref_name }}"
          environment=${{ inputs.environment }}
          helm upgrade --install -n epsilon \
            -f .devops/helm/values-$environment.yaml \
            --set image.tag="${ref_name}_${version}" ${{ env.SERVICE_NAME }} \
            .devops/helm/
